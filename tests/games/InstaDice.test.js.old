const Registry = artifacts.require("Registry");
const InstaDice = artifacts.require("InstaDice");

const createDefaultTxTester = require("../../js/tx-tester/tx-tester.js")
    .createDefaultTxTester.bind(null, web3, assert, it);
const testUtil = createDefaultTxTester().plugins.testUtil;
const BigNumber = web3.toBigNumber(0).constructor;

const BankrollableUtils = require("./helpers/BankrollableUtils.js").Create(web3, createDefaultTxTester);

var FEE_BIPS = 100;   // 1%

describe('InstaDice', function(){
    const accounts = web3.eth.accounts;
    const owner = accounts[1];
    const player1 = accounts[2];
    const player2 = accounts[3];
    const player3 = accounts[4];
    const dummyTreasury = accounts[5];
    const admin = accounts[6];
    const anon = accounts[7];
    var dice;
    var registry;

    const MIN_BET = new BigNumber(1e9);
    const MAX_BET = new BigNumber(.6e18);
    const MIN_NUMBER = new BigNumber(5);
    const MAX_NUMBER = new BigNumber(99);
    const FEE_BIPS = new BigNumber(125);

    before("Set up Registry and InstaDice.", async function(){
        const addresses = {
            owner: owner,
            player1: player1, 
            player2: player2,
            player3: player3,
            dummyTreasury: dummyTreasury,
            admin: admin,
            anon: anon,
        };
        await createDefaultTxTester().nameAddresses(addresses).start();

        this.logInfo("Create a Registry, with ADMIN and TREASURY set.");
        await createDefaultTxTester()
            .doNewTx(Registry, [owner], {from: anon})
            .assertSuccess()
            .withTxResult((res, plugins)=>{
                registry = res.contract;
                plugins.addAddresses({registry: registry.address});
            }).start();
        await createDefaultTxTester()
            .doTx([registry, "register", "ADMIN", admin, {from: owner}])
            .assertSuccess().start();
        await createDefaultTxTester()
            .doTx([registry, "register","TREASURY", dummyTreasury, {from: owner}])
            .assertSuccess().start();

        this.logInfo("Create the dice contract that we will be testing.");
        await createDefaultTxTester()
            .doNewTx(InstaDice, [registry.address], {from: anon})
            .assertSuccess()
            .withTxResult((res, plugins)=>{
                dice = res.contract;
                plugins.addAddresses({dice: dice.address});
            }).start();

        await createDefaultTxTester().printNamedAddresses().start();
    });

    describe("Funding", function(){
        it("Anyone can add funding", function(){
            return BankrollableUtils.assertAddsBankroll(dice, anon, .5e18);
        });
        it("curMaxBet is correct", function(){
            return assertCurMaxBet();
        });
    });

    describe(".changeSettings()", function(){
        it("is not callable from anon", function(){
            return createDefaultTxTester()
                .doTx([dice, "changeSettings", MIN_BET, MAX_BET, MIN_NUMBER, MAX_NUMBER, FEE_BIPS, {from: anon}])
                .assertInvalidOpCode()
                .start();
        });
        it("works from admin", function(){
            this.logInfo(`Admin can change minBet, maxBet, minNumber, maxNumber, and feeBips`);
            return createDefaultTxTester()
                .doTx([dice, "changeSettings", MIN_BET, MAX_BET, MIN_NUMBER, MAX_NUMBER, FEE_BIPS, {from: admin}])
                .assertSuccess()
                .assertOnlyLog("SettingsChanged", {
                    time: null,
                    admin: admin
                })
                .assertCallReturns([dice, "minBet"], MIN_BET)
                .assertCallReturns([dice, "maxBet"], MAX_BET)
                .assertCallReturns([dice, "minNumber"], MIN_NUMBER)
                .assertCallReturns([dice, "maxNumber"], MAX_NUMBER)
                .assertCallReturns([dice, "feeBips"], FEE_BIPS)
                .start();
        });
    });

    describe("Rolling restrictions", async function(){
        const minBet = await dice.minBet();
        const maxBet = await dice.maxBet();
        const minNumber = await dice.minNumber();
        const maxNumber = await dice.maxNumber();
        it("Cannot roll tiny amount", function(){
            return assertRollRefunded(player1, minBet.minus(1), 50, "Bet too small.");
        });
        it("Cannot roll huge amount", function(){
            return assertRollRefunded(player1, maxBet.plus(1), 50, "Bet too large.");
        });
        it("Cannot roll with number too small", function(){
            return assertRollRefunded(player1, minBet, minNumber.minus(1), "Roll number too small.");
        });
        it("Cannot roll with number too large", function(){
            return assertRollRefunded(player1, minBet, maxNumber.plus(1), "Roll number too large.");
        });

        describe("Rejects rolls when balance is too small", function(){
            it("Reduce bankroll to small amount", async function(){
                this.logInfo(`Remove bankroll so that balance is very small.`);
                const bankroll = await dice.bankroll();
                await BankrollableUtils.assertRemovesBankroll(dice, anon, bankroll.minus(1));
            });
            it("Should not allow a bet", async function(){
                this.logInfo(`Player should not be able to place a wager, due to low balance.`);
                return assertRollRefunded(player1, MAX_BET, MIN_NUMBER, "May be unable to payout on a win.");
            });
            it("Restores bankroll", async function(){
                this.logInfo("Add a lot of bankroll back.");
                return BankrollableUtils.assertAddsBankroll(dice, anon, 1e18);
            });
        });
    });

    describe("Rolling", function(){
        it("Player 1 can roll", async function(){
            await assertCanRoll(player1, MIN_BET, 50);
        });
        it("Player 1 can roll again", async function(){
            await assertCanRoll(player1, MIN_BET, 50);
        });
        it("Player 1 can roll again", async function(){
            await assertCanRoll(player1, MIN_BET, 50);
        });
        it("Player 2 can roll", async function(){
            await assertCanRoll(player2, MIN_BET.plus(1e9), 50);
        });
        it("Player 3 can roll", async function(){
            await assertCanRoll(player3, MIN_BET.plus(2e9), 50);
        });
    });

    // This causes ganache to die. Need to test this manually.
    describe("Rolls on same block", async function(){
        // this will become an array of promises.
        const txs = [
            [MIN_BET, 10, player1],
            [MIN_BET, 20, player2],
            [MIN_BET, 30, player3],
            [MIN_BET, 40, player1]
        ];

        // useful function to get roll from above tx array
        async function getRollFromTx(tx) {
            const res = await tx;
            const event = res.logs.find(l => l.event=="RollWagered");
            if (!event) {
                console.log("Roll Result:", res);
                throw new Error("Result did not have RollWagered event.");
            }
            const id = event.args.id;
            const roll = await getRoll(id);
            roll.computedResult = computeResult(event.blockHash, id);
            roll.isWinner = roll.computedResult.lte(roll.number);
            return roll;
        }

        it("Roll many times on the same block", async function(){
            const tester = createDefaultTxTester()
                .startLedger([dice, player1, player2, player3])
                .doFn(() => {
                    testUtil.stopMining();
                    console.log(`Stopped mining.`);
                })
                .wait(1000);

            txs.forEach((tx, i) => {
                tester.doFn(() => {
                    // Ganache bug: increment gas each time, so that it generates unique tx id
                    txs[i] = dice.roll(tx[1], {value: tx[0], from: tx[2], gas: 100000+i});
                    console.log(`Submitted transaction for roll ${i+1}.`);
                }).wait(100);
            });
                
            return tester
                .doFn(() => {
                    console.log("Mining block now...");
                    testUtil.mineBlocks(1);
                    testUtil.startMining();
                    return Promise.all(txs).then((txResArr)=>{
                        const tx1res = txResArr[0];
                        const block = web3.eth.getBlock(tx1res.receipt.blockNumber);
                        if (block.transactions.length != txs.length)
                            throw new Error(`Block has ${block.transactions.length} txs, expected ${txs.length}.`);
                        
                        // ensure transactions occurred in expected order.
                        txResArr.forEach((txRes, i) => {
                            const hash = txRes.tx;
                            if (block.transactions[i] != hash){
                                console.log("block.transactions", block.transactions);
                                console.log("txRes.txs", txResArr.map(txRes=>txRes.tx));
                                throw new Error(`Incorrect order: tx[${i}] was not in block.transactions[${i}]`);
                            }
                            // fix logs bug (all logs included in all receipts/logs)
                            txRes.receipt.logs = txRes.receipt.logs.filter((l) => l.transactionHash == hash);
                            txRes.logs = txRes.logs.filter((l) => l.transactionHash == hash);
                        });
                        // fix ganache bug where .gasUsed includes previous tx's gasUsed
                        for (var i=txResArr.length-1; i>=0; i--){
                            if (i > 0) txResArr[i].receipt.gasUsed -= txResArr[i-1].receipt.gasUsed;
                        }
                        console.log("All txs executed on same block, in expected order.");
                    });
                }).start();
        });

        it("All rolls were wagered, and finalizeId incremented as expected.", async function(){
            const rolls = [];
            for (var i=0; i<txs.length; i++) {
                rolls.push(await getRollFromTx(txs[i]));
            };

            const resultTester = createDefaultTxTester();
            txs.forEach((tx, i) => {
                const roll = rolls[i];
                resultTester
                    .doTx(tx, `Roll ${roll.id}`)
                    .assertSuccess()
                    .assertLog("RollWagered");
            });
            return resultTester
                .assertCallReturns([dice, "getNumUnfinalized"], rolls.length)
                .assertCallReturns([dice, "finalizeId"], rolls.shift().id)
                .start();
        });

        it("No rolls were finalized.", async function(){
            for (var i=0; i<txs.length; i++){
                const roll = await getRollFromTx(txs[i]);
                assert(roll.result.equals(0), "roll.result should be 0");
                const resultStr = (roll.isWinner ? "WIN" : "LOSS") + ` with result: ${roll.computedResult}`;
                console.log(`Roll ${roll.id} not finalized. Result will be: ${resultStr}`);
            };
        });
    });

    describe("More rolls. Queue should catch up.", function(){
        it("Player 1 can roll", async function(){
            await assertCanRoll(player1, MIN_BET, 20);
        });
        it("Player 2 can roll", async function(){
            await assertCanRoll(player1, MIN_BET, 20);
        });
        it("Player 1 can roll", async function(){
            await assertCanRoll(player1, MIN_BET, 20);
        });
        it("Player 2 can roll", async function(){
            await assertCanRoll(player1, MIN_BET, 20);
        });
        it("Player 1 can roll", async function(){
            await assertCanRoll(player1, MIN_BET, 20);
        });
    });

    describe("Taking profits", function(){
        it("Try to generate a profit", async function(){
            this.logInfo(`Depending on the above rolls, may or may not have a profit.`);
            var profits = await dice.profits();
            const balance = await testUtil.getBalance(dice.address);
            if (profits.gt(0)) {
                this.logInfo(`InstaDice has profits of: ${profits}.`);
                return;
            }
            this.logInfo(`InstaDice has no profits. Will try to get some.`);
            this.logInfo(`Now betting a large amount with small odds...`);
            await createDefaultTxTester()
                .doTx([dice, "roll", MIN_NUMBER, {from: player1, value: MIN_BET.mul(5)}])
                .assertSuccess()
                .assertLog("RollWagered")
                .doTx([dice, "roll", MIN_NUMBER, {from: player1, value: MIN_BET}])
                .assertSuccess()
                .assertLog("RollWagered")
                .start();

            profits = await dice.profits();
            if (profits.gt(0)) {
                this.logInfo(`Now it has profits of ${profits}.`);
            } else {
                throw new Error(`Failed to generate a profits... try test again.`);
            }
        });
        it("Collects profits", async function(){
            return BankrollableUtils.assertSendsProfits(dice, anon);
        });
    });

    describe("Users can manually collect", function(){
        it("Roll, and collect manually", async function(){
            this.logInfo(`Having player1 bet, very likely to win.`);
            await assertCanRoll(player1, MIN_BET, MAX_NUMBER);
            this.logInfo('');
            this.logInfo('Collecting payout manually...');
            await assertCanPayoutRoll(await dice.curId());
            this.logInfo('');
            this.logInfo('Collecting payout manually again should do nothing.');
            await assertCanPayoutRoll(await dice.curId());
        });

        it("Next roll works correctly", function(){
            return assertCanRoll(player2, MIN_BET, 50);
        });
        it("Next roll works correctly", function(){
            return assertCanRoll(player2, MIN_BET, 50);
        });
    });

    async function getExpectedProfits() {
        const funding = await dice.funding();
        const balance = await testUtil.getBalance(dice.address);
        return balance.gt(funding)
            ? balance.minus(funding)
            : 0;
    }

    async function assertCurMaxBet(){
        const bankroll = await dice.bankrollAvailable();
        const minNumber = await dice.minNumber();
        const expCurMaxBet = bankroll.div((new BigNumber(100)).div(minNumber).mul(10));
        return createDefaultTxTester()
            .assertCallReturns([dice, "curMaxBet"], expCurMaxBet)
            .start();
    }

    async function assertCanPayoutRoll(id) {
        const roll = await getRoll(id);
        const blockHash = (await testUtil.getBlock(roll.block)).hash;
        const isFinalized = roll.result.gt(0);
        const result = computeResult(blockHash, id);
        const didWin = !result.gt(roll.number);
        const expPayout = didWin && !roll.isPaid
            ? roll.payout
            : new BigNumber(0);
        const logCount = (!isFinalized ? 1 : 0) + (expPayout.gt(0) ? 1 : 0);
        console.log(`IsFinalized: ${isFinalized}, expPayout: ${expPayout}`);

        const txTester = createDefaultTxTester()
            .startLedger([dice, roll.user])
            .doTx([dice, "payoutRoll", id, {from: anon}])
            .assertSuccess()
            .stopLedger()
                .assertDelta(dice, expPayout.mul(-1))
                .assertDelta(roll.user, expPayout)
            .assertLogCount(logCount)

        if (!isFinalized) {
            txTester.assertLog("RollFinalized");
        }
        if (expPayout.gt(0)) {
            txTester.assertLog("PayoutSuccess");
        }

        return txTester.start();
    }

    async function assertCanRoll(player, bet, number) {
        bet = new BigNumber(bet);
        number = new BigNumber(number);
        
        const expId = (await dice.curId()).plus(1);
        const expBlock = testUtil.getBlockNumber()+1;
        const expPayout = computePayout(bet, number);
        const expTotalWagered = (await dice.totalWagered()).plus(bet.div(1e9).floor().mul(1e9));
        
        var expGasUsed = new BigNumber(56000);
        var expCurUserId = await dice.curUserId();
        var expUserId = await dice.userIds(player);
        if (expUserId.equals(0)) {
            expGasUsed = expGasUsed.plus(40000);
            expCurUserId = expCurUserId.plus(1);
            expUserId = expCurUserId;
            console.log(`This roll should assign userId ${expUserId} to the bettor.`);
        } else {
            console.log(`This bettor has user id of ${expUserId}.`);
        }

        var expLogs = [["RollWagered", {
            id: expId,
            user: player,
            bet: bet,
            number: number,
            payout: expPayout
        }]];
        var expFinalizeId = await dice.finalizeId();
        var expTotalWon = await dice.totalWon();
        var expPlayerWinnings = new BigNumber(0);
        var expPayouts = new BigNumber(0);

        // Determines what will get finalized, and updates
        //  the expectations based on that.
        async function simulateFinalizeNext(onlyOnLoss) {
            console.log(`=== Simluating finalization of Roll #${expFinalizeId} ===`);
            const id = expFinalizeId;

            const roll = await getRoll(id);
            if (roll.id.equals(0)) {
                console.log(`Roll #${id}: Does not exist. Will do nothing.`);
                expGasUsed = expGasUsed.plus(1000);
                return false;
            }

            if (roll.result.gt(0)) {
                console.log(`Roll #${id}: Should skip it, it's already finalized.`);
                expFinalizeId = expFinalizeId.plus(1);
                expGasUsed = expGasUsed.plus(7000);
                return true;
            }

            // See what the results of roll will be.
            const blockHash = (await testUtil.getBlock(roll.block)).hash;
            const result = computeResult(blockHash, id);
            const payout = result.gt(roll.number)
                ? new BigNumber(0)
                : roll.payout;

            // Update expected stuff if they won
            if (payout.gt(0)) {
                if (onlyOnLoss) {
                    console.log("Roll #${id}: WON, but won't finalize because we already finalized one.");
                    expGasUsed = expGasUsed.plus(2000);
                    return false;
                }

                console.log(`Roll #${id}: Should finalize as WIN with roll of ${result}<=${roll.number}.`);
                console.log(`Will expect to see correct deltas and PayoutSuccess log.`);
                expTotalWon = expTotalWon.plus(payout.div(1e9).floor().mul(1e9));
                expPlayerWinnings = roll.user == player
                    ? expPlayerWinnings.plus(payout)
                    : expPlayerWinnings;
                expPayouts = expPayouts.plus(payout);
                expLogs.push(["PayoutSuccess", {
                    time: null,
                    id: id,
                    user: roll.user,
                    payout: payout
                }]);
                expGasUsed = expGasUsed.plus(40000);
            } else {
                console.log(`Roll #${id}: Should finalize as LOSS with roll of ${result}>=${roll.number}.`);
                expGasUsed = expGasUsed.plus(17000);
            }

            // Update expected values
            expFinalizeId = expFinalizeId.plus(1);
            expLogs.push(["RollFinalized", {
                time: null,
                id: id,
                user: roll.user,
                result: result,
                payout: payout
            }]);
            console.log(`Will expect correct RollFinalized log for roll #${id}.`);

            return payout.equals(0);
        }

        // Simulate finalizing next stuff.
        console.log("");
        const shouldFinalizeNext = await simulateFinalizeNext();
        console.log("");
        if (shouldFinalizeNext) {
            await simulateFinalizeNext(true);
        } else {
            console.log("=== Should not attempt to finalize next ===");
            console.log("The previous finalization should pay out or not exist.")
        }
        console.log("");

        // Do TX, assert proper deltas and logs
        var blockNumber;
        const txTester = createDefaultTxTester()
            .startLedger([player, dice])
            .doTx([dice, "roll", number, {value: bet, from: player}])
                .assertSuccess()
            .doFn(async function(ctx){
                blockNumber = ctx.txRes.receipt.blockNumber
                await testUtil.mineBlocks(1);
            })
            .assertLogCount(expLogs.length)

        expLogs.forEach((arr) => {
            txTester.assertLog(arr[0], arr[1])
        });

        // Assert calls are accurate
        txTester
            .stopLedger()
                .assertDelta(dice, bet.minus(expPayouts))
                .assertDeltaMinusTxFee(player, bet.mul(-1).plus(expPlayerWinnings))
            .assertCallReturns([dice, "rolls", expId], ()=>[
                expId, expUserId, bet, number, expPayout, blockNumber, 0, false
            ])
            .assertCallReturns([dice, "curId"], expId)
            .assertCallReturns([dice, "curUserId"], expCurUserId)
            .assertCallReturns([dice, "userIds", player], expUserId)
            .assertCallReturns([dice, "userAddresses", expUserId], player)
            .assertCallReturns([dice, "finalizeId"], expFinalizeId)
            .assertCallReturns([dice, "totalWagered"], expTotalWagered)
            .assertCallReturns([dice, "totalWon"], expTotalWon)
            .assertGasUsedLt(expGasUsed)
            

        // Assert this roll has expected result.
        var expResult;
        return txTester
            .doFn(async function(ctx){
                const blockHash = ctx.txRes.receipt.blockHash;
                expResult = computeResult(blockHash, expId);
                const winStr = expResult.lte(number) ? "win" : "lose"
                console.log(`This roll should ${winStr} with a result of ${expResult}.`);
            })
            .assertCallReturns([dice, "getRollResult", expId], ()=>expResult)
            .start();
    }

    async function assertRollRefunded(player, bet, number, msg) {
        const curId = await dice.curId();
        return createDefaultTxTester()
            .startLedger([dice, player])
            .doTx([dice, "roll", number, {value: bet, from: player}])
            .assertSuccess()
                .assertOnlyLog("RollRefunded", {
                    time: null,
                    user: player,
                    msg: msg
                })
            .stopLedger()
                .assertNoDelta(dice)
                .assertLostTxFee(player)
            .assertCallReturns([dice, "curId"], curId)
            .start();
    }

    async function getRoll(id) {
        const arr = await dice.rolls(id);
        const userId = arr[1];
        const user = await dice.userAddresses(arr[1]);
        return {
            id: arr[0],
            user: user,
            bet: arr[2],
            number: arr[3],
            payout: arr[4],
            block: arr[5],
            result: arr[6],
            isPaid: arr[7],
        };
    }

    function computeResult(blockHash, id) {
        function toPaddedHex(num, bits) {
            num = new BigNumber(num);
            const targetLen = Math.ceil(bits / 4);
            const hexStr = num.toString(16);
            if (hexStr.length > targetLen)
                throw new Error(`Cannot convert ${num} to ${bits}... it's too large.`);
            const zeroes = (new Array(targetLen-hexStr.length+1)).join("0");
            return `${zeroes}${hexStr}`;
        }
        const idHex = toPaddedHex(id, 32);
        const hash = web3.sha3(blockHash + idHex, {encoding: "hex"});
        const bn = new BigNumber(hash);
        return bn.mod(100).plus(1);
    }

    function computePayout(bet, number) {
        return (new BigNumber(100)).div(number).mul(bet).mul(10000-FEE_BIPS).div(10000).round();
    }
});

